import os
import subprocess
import requests
from moviepy.video.VideoClip import ImageClip, ColorClip, TextClip
from moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip

import config


class ContentUploader(object):
    def __init__(self, name, result_path, id):
        self.url = None
        self.name = name
        self.result_path = result_path
        self.thumb_path = config.THUMB_PATH
        self.logo_path = config.LOGO_PATH
        self.secret_path = config.SECRET_PATH
        self.id = id
        self.tags = None
        self.weight = None

    def upload_content(self):
        print('Creating thumbnail...')
        self.create_thumbnail()
        print('Getting weight...')
        self.get_weight()
        print('Uploading...')
        self.upload()
        print('Storing...')
        self.store()

    def create_thumbnail(self):
        color = (255, 255, 255)
        size = (1280, 720)
        background = ColorClip(size, color)
        logo = ImageClip(self.logo_path) \
            .resize(width=400, height=200) \
            .set_pos(('center', 'center'))
        text = TextClip(txt=str(self.id), size=(500, 500)).set_position(
            ('center', 'bottom'))
        CompositeVideoClip([background, logo, text]).save_frame(self.thumb_path)

    def upload(self):
        key = "Video URL:"
        category = 'Science & Technology'
        description = self.create_description()
        print('title:', self.name)
        print('description:', description)
        print('category:', category)
        print('tags:', self.tags)
        print('thumb_path:', self.thumb_path)
        print('results_path:', self.result_path)
        print('secret_path:', self.secret_path)
        upload_cmd = ['youtube-upload',
                      '--title=' + self.name,
                      '--description=' + description,
                      '--category=' + category,
                      '--tags=' + self.tags,
                      '--thumbnail=' + self.thumb_path,
                      '--client-secrets=' + self.secret_path,
                      self.result_path]
        print('attempting to upload file...')
        try:
            proc = subprocess.Popen(upload_cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            for line in proc.stdout:
                entry = line.decode('utf-8')
                print('proc entry: ', entry)
                if key in entry:
                    url = entry[len(key):]
                    self.url = url
            proc.wait()
        except subprocess.CalledProcessError as e:
            print('exception occured')
            print(e.output)

    def create_description(self):
        return 'Content ID ' + str(self.id) + ' was generated by the LitterBug script in an ' \
                                              'attempt to raise environmental awareness online.\n\n' \
                                              'To learn more about Project Litter Bug, please ' \
                                              'visit http://projectlitterbug.com\n\n' \
                                              'The full source code for this project can be ' \
                                              'found at ' \
                                              'https://github.com/nkelton/Project-Litter-Bug\n\n\n' \
                                              'CONTENT STATS...\n\n\n' \
                                              'Weight: ' + str(self.weight) + ' Bytes\n\n' \
               + self.retrieve_content_lst()

    def retrieve_content_lst(self):
        url = self._url('/content/' + str(self.id) + '/')
        response = requests.get(url)
        if response.status_code == 200:
            temp = response.json()
            vid_str = self.create_content_str(temp, 'vid')
            gif_str = self.create_content_str(temp, 'gif')
            pic_str = self.create_content_str(temp, 'pic')
            sfx_str = self.create_content_str(temp, 'sfx')
            return 'Videos used:' + vid_str + 'Gifs used:' + gif_str + \
                   'Pictures used:' + pic_str + 'Sfx used:' + sfx_str
        else:
            return 'Content stats currently unavailable...'

    @staticmethod
    def create_content_str(data, media):
        content_str = '\n'
        for d in data:
            if d['type'] == media:
                content_str += d['url'] + '\n'
        return content_str

    def get_weight(self):
        if os.path.exists(self.result_path):
            self.weight = os.path.getsize(self.result_path)
        else:
            self.weight = 0

    def store(self):
        url = self._url('/litter/')
        requests.post(url, json={
            'litter_id': self.id,
            'title': self.name,
            'url': self.url,
            'weight': self.weight,
        })

    @staticmethod
    def _url(path):
        return config.BASE_URL + path

    def set_tags(self, tags):
        self.tags = tags
